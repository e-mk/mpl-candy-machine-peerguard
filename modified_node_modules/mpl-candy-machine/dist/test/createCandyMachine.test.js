"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mpl_token_metadata_1 = require("@metaplex-foundation/mpl-token-metadata");
const umi_1 = require("@metaplex-foundation/umi");
const ava_1 = __importDefault(require("ava"));
const src_1 = require("../src");
const _setup_1 = require("./_setup");
(0, ava_1.default)('it can create a candy machine for regular NFTs', async (t) => {
    // Given an existing collection NFT.
    const umi = await (0, _setup_1.createUmi)();
    const collectionMint = await (0, _setup_1.createCollectionNft)(umi);
    // When we create a new candy machine for that collection.
    const candyMachine = (0, umi_1.generateSigner)(umi);
    const creator = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add(await (0, src_1.createCandyMachine)(umi, {
        candyMachine,
        collectionMint: collectionMint.publicKey,
        collectionUpdateAuthority: umi.identity,
        itemsAvailable: 100,
        sellerFeeBasisPoints: (0, umi_1.percentAmount)(1.23),
        creators: [
            { address: creator.publicKey, verified: false, percentageShare: 100 },
        ],
        configLineSettings: (0, umi_1.some)({
            prefixName: 'My NFT #',
            nameLength: 8,
            prefixUri: 'https://example.com/',
            uriLength: 20,
            isSequential: false,
        }),
    }))
        .sendAndConfirm(umi);
    // Then we expect the candy machine account to have the right data.
    const candyMachineAccount = await (0, src_1.fetchCandyMachine)(umi, candyMachine.publicKey);
    t.like(candyMachineAccount, {
        publicKey: (0, umi_1.publicKey)(candyMachine),
        authority: (0, umi_1.publicKey)(umi.identity),
        mintAuthority: (0, umi_1.publicKey)(umi.identity),
        collectionMint: (0, umi_1.publicKey)(collectionMint),
        version: src_1.AccountVersion.V1,
        tokenStandard: mpl_token_metadata_1.TokenStandard.NonFungible,
        itemsRedeemed: 0n,
        data: {
            itemsAvailable: 100n,
            symbol: '',
            sellerFeeBasisPoints: (0, umi_1.percentAmount)(1.23),
            maxEditionSupply: 0n,
            isMutable: true,
            creators: [
                {
                    address: (0, umi_1.publicKey)(creator),
                    verified: false,
                    percentageShare: 100,
                },
            ],
            configLineSettings: (0, umi_1.some)({
                prefixName: 'My NFT #',
                nameLength: 8,
                prefixUri: 'https://example.com/',
                uriLength: 20,
                isSequential: false,
            }),
            hiddenSettings: (0, umi_1.none)(),
        },
    });
});
(0, ava_1.default)("it can create a candy machine that's bigger than 10Kb", async (t) => {
    // Given an existing collection NFT.
    const umi = await (0, _setup_1.createUmi)();
    const collectionMint = await (0, _setup_1.createCollectionNft)(umi);
    // When we create a new candy machine with a large amount of items.
    const candyMachine = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add(await (0, src_1.createCandyMachine)(umi, {
        candyMachine,
        collectionMint: collectionMint.publicKey,
        collectionUpdateAuthority: umi.identity,
        itemsAvailable: 20000,
        sellerFeeBasisPoints: (0, umi_1.percentAmount)(1.23),
        creators: [],
        configLineSettings: (0, umi_1.some)({
            prefixName: '',
            nameLength: 32,
            prefixUri: '',
            uriLength: 200,
            isSequential: false,
        }),
    }))
        .sendAndConfirm(umi);
    // Then we expect the candy machine account to have been created.
    const candyMachineAccount = await (0, src_1.fetchCandyMachine)(umi, candyMachine.publicKey);
    t.like(candyMachineAccount, {
        publicKey: (0, umi_1.publicKey)(candyMachine),
        itemsRedeemed: 0n,
        data: { itemsAvailable: 20000n },
    });
});
//# sourceMappingURL=createCandyMachine.test.js.map