"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const umi_1 = require("@metaplex-foundation/umi");
const ava_1 = __importDefault(require("ava"));
const src_1 = require("../src");
const _setup_1 = require("./_setup");
(0, ava_1.default)('it can delete a candy machine V1', async (t) => {
    // Given an existing candy machine.
    const umi = await (0, _setup_1.createUmi)();
    const candyMachine = await (0, _setup_1.createV1)(umi);
    // When we delete it.
    await (0, umi_1.transactionBuilder)()
        .add((0, src_1.deleteCandyMachine)(umi, { candyMachine: candyMachine.publicKey }))
        .sendAndConfirm(umi);
    // Then the candy machine account no longer exists.
    t.false(await umi.rpc.accountExists(candyMachine.publicKey));
});
(0, ava_1.default)('it can delete a candy machine V2', async (t) => {
    // Given an existing candy machine.
    const umi = await (0, _setup_1.createUmi)();
    const candyMachine = await (0, _setup_1.createV2)(umi);
    // When we delete it.
    await (0, umi_1.transactionBuilder)()
        .add((0, src_1.deleteCandyMachine)(umi, { candyMachine: candyMachine.publicKey }))
        .sendAndConfirm(umi);
    // Then the candy machine account no longer exists.
    t.false(await umi.rpc.accountExists(candyMachine.publicKey));
});
//# sourceMappingURL=deleteCandyMachine.test.js.map