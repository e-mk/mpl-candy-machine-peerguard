import { TokenStandard, createNft as baseCreateNft, createProgrammableNft as baseCreateProgrammableNft } from '@metaplex-foundation/mpl-token-metadata';
import { createMint } from '@metaplex-foundation/mpl-toolbox';
import { Context, DateTime, PublicKey, PublicKeyInput, Signer, TransactionSignature, Umi } from '@metaplex-foundation/umi';
import { Assertions } from 'ava';
import { CandyGuardDataArgs, ConfigLine, CreateCandyGuardInstructionAccounts, CreateCandyGuardInstructionDataArgs, DefaultGuardSetArgs, GuardSetArgs, createCandyMachine as baseCreateCandyMachine, createCandyMachineV2 as baseCreateCandyMachineV2 } from '../src';
export declare const METAPLEX_DEFAULT_RULESET: PublicKey<"eBJLFYPxJmMGKuFwpDWkzxZeUrad92kZRC5BJLpzyT9">;
export declare const createUmi: () => Promise<Umi>;
export declare const createNft: (umi: Umi, input?: Partial<Parameters<typeof baseCreateNft>[1]>) => Promise<Signer>;
export declare const createProgrammableNft: (umi: Umi, input?: Partial<Parameters<typeof baseCreateProgrammableNft>[1]>) => Promise<Signer>;
export declare const createCollectionNft: (umi: Umi, input?: Partial<Parameters<typeof baseCreateNft>[1]>) => Promise<Signer>;
export declare const createVerifiedNft: (umi: Umi, input: Partial<Parameters<typeof baseCreateNft>[1]> & {
    collectionMint: PublicKey;
    collectionAuthority?: Signer;
}) => Promise<Signer>;
export declare const createVerifiedProgrammableNft: (umi: Umi, input: Partial<Parameters<typeof baseCreateNft>[1]> & {
    collectionMint: PublicKey;
    collectionAuthority?: Signer;
}) => Promise<Signer>;
export declare const createMintWithHolders: (umi: Umi, input: Partial<Omit<Parameters<typeof createMint>[1], 'mintAuthority'>> & {
    mintAuthority?: Signer;
    holders: {
        owner: PublicKeyInput;
        amount: number | bigint;
    }[];
}) => Promise<[Signer, ...PublicKey[]]>;
export declare const createV1: <DA extends GuardSetArgs = DefaultGuardSetArgs>(umi: Umi, input?: Partial<import("../src").CreateCandyMachineInput> & Partial<CandyGuardDataArgs<DA extends undefined ? DefaultGuardSetArgs : DA>> & {
    configLineIndex?: number | undefined;
    configLines?: ConfigLine[] | undefined;
}) => Promise<Signer>;
export declare const createV2: <DA extends GuardSetArgs = DefaultGuardSetArgs>(umi: Umi, input?: Partial<import("../src").CreateCandyMachineV2Input> & Partial<CandyGuardDataArgs<DA extends undefined ? DefaultGuardSetArgs : DA>> & {
    configLineIndex?: number | undefined;
    configLines?: ConfigLine[] | undefined;
}) => Promise<Signer>;
export declare const defaultAssetData: () => {
    name: string;
    sellerFeeBasisPoints: import("@metaplex-foundation/umi").Amount<"%", 2>;
    uri: string;
};
export declare const defaultCandyMachineData: (context: Pick<Context, 'identity'>) => {
    tokenStandard: TokenStandard;
    collectionUpdateAuthority: Signer;
    itemsAvailable: number;
    sellerFeeBasisPoints: import("@metaplex-foundation/umi").Amount<"%", 2>;
    creators: {
        address: PublicKey<string>;
        verified: boolean;
        percentageShare: number;
    }[];
    configLineSettings: import("@metaplex-foundation/umi").Option<{
        prefixName: string;
        nameLength: number;
        prefixUri: string;
        uriLength: number;
        isSequential: boolean;
    }>;
};
export declare const createCandyGuard: <DA extends GuardSetArgs = DefaultGuardSetArgs>(umi: Umi, input?: Partial<CreateCandyGuardInstructionAccounts & Partial<CandyGuardDataArgs<DA extends undefined ? DefaultGuardSetArgs : DA>>>) => Promise<import("@metaplex-foundation/umi").Pda<string, number>>;
export declare const assertSuccessfulMint: (t: Assertions, umi: Umi, input: {
    mint: PublicKey | Signer;
    owner: PublicKey | Signer;
    token?: PublicKey;
    tokenStandard?: TokenStandard;
    name?: string | RegExp;
    uri?: string | RegExp;
}) => Promise<void>;
export declare const assertBotTax: (t: Assertions, umi: Umi, mint: Signer | PublicKey, signature: TransactionSignature, extraRegex?: RegExp | undefined) => Promise<void>;
export declare const assertBurnedNft: (t: Assertions, umi: Umi, mint: Signer | PublicKey, owner?: PublicKey<string> | Signer | undefined) => Promise<void>;
export declare const yesterday: () => DateTime;
export declare const tomorrow: () => DateTime;
