"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const umi_1 = require("@metaplex-foundation/umi");
const ava_1 = __importDefault(require("ava"));
const src_1 = require("../src");
const _setup_1 = require("./_setup");
(0, ava_1.default)('it can update the authority of a candy machine v1', async (t) => {
    // Given a Candy Machine using authority A.
    const umi = await (0, _setup_1.createUmi)();
    const authorityA = (0, umi_1.generateSigner)(umi);
    const candyMachine = await (0, _setup_1.createV1)(umi, {
        authority: authorityA.publicKey,
    });
    // When we update it to use authority B.
    const authorityB = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, src_1.setCandyMachineAuthority)(umi, {
        candyMachine: candyMachine.publicKey,
        authority: authorityA,
        newAuthority: authorityB.publicKey,
    }))
        .sendAndConfirm(umi);
    // Then the Candy Machine's authority was updated accordingly.
    const candyMachineAccount = await (0, src_1.fetchCandyMachine)(umi, candyMachine.publicKey);
    t.like(candyMachineAccount, {
        authority: (0, umi_1.publicKey)(authorityB.publicKey),
    });
});
(0, ava_1.default)('it can update the authority of a candy machine v2', async (t) => {
    // Given a Candy Machine using authority A.
    const umi = await (0, _setup_1.createUmi)();
    const authorityA = (0, umi_1.generateSigner)(umi);
    const candyMachine = await (0, _setup_1.createV2)(umi, {
        authority: authorityA.publicKey,
    });
    // When we update it to use authority B.
    const authorityB = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, src_1.setCandyMachineAuthority)(umi, {
        candyMachine: candyMachine.publicKey,
        authority: authorityA,
        newAuthority: authorityB.publicKey,
    }))
        .sendAndConfirm(umi);
    // Then the Candy Machine's authority was updated accordingly.
    const candyMachineAccount = await (0, src_1.fetchCandyMachine)(umi, candyMachine.publicKey);
    t.like(candyMachineAccount, {
        authority: (0, umi_1.publicKey)(authorityB.publicKey),
    });
});
//# sourceMappingURL=setCandyMachineAuthority.test.js.map