"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const umi_1 = require("@metaplex-foundation/umi");
const ava_1 = __importDefault(require("ava"));
const src_1 = require("../src");
const _setup_1 = require("./_setup");
(0, ava_1.default)('it can update the data of a candy machine', async (t) => {
    // Given a Candy Machine with the following data.
    const umi = await (0, _setup_1.createUmi)();
    const creatorA = (0, umi_1.generateSigner)(umi).publicKey;
    const candyMachine = await (0, _setup_1.createV2)(umi, {
        itemsAvailable: 1000,
        symbol: 'OLD',
        sellerFeeBasisPoints: (0, umi_1.percentAmount)(1),
        maxEditionSupply: 1n,
        isMutable: true,
        creators: [{ address: creatorA, percentageShare: 100, verified: false }],
        configLineSettings: (0, umi_1.some)({
            prefixName: 'My Old NFT #',
            nameLength: 4,
            prefixUri: 'https://arweave.net/',
            uriLength: 50,
            isSequential: true,
        }),
    });
    // When we update its data.
    const creatorB = (0, umi_1.generateSigner)(umi).publicKey;
    await (0, umi_1.transactionBuilder)()
        .add((0, src_1.updateCandyMachine)(umi, {
        candyMachine: candyMachine.publicKey,
        data: {
            itemsAvailable: 1000,
            symbol: 'NEW',
            sellerFeeBasisPoints: (0, umi_1.percentAmount)(2),
            maxEditionSupply: 2,
            isMutable: false,
            creators: [
                { address: creatorB, percentageShare: 100, verified: false },
            ],
            configLineSettings: (0, umi_1.some)({
                prefixName: 'My New NFT #$ID+1$',
                nameLength: 0,
                prefixUri: 'https://my.app.com/nfts/$ID+1$',
                uriLength: 0,
                isSequential: false,
            }),
            hiddenSettings: (0, umi_1.none)(),
        },
    }))
        .sendAndConfirm(umi);
    // Then the Candy Machine's data was updated accordingly.
    const candyMachineAccount = await (0, src_1.fetchCandyMachine)(umi, candyMachine.publicKey);
    t.like(candyMachineAccount, {
        data: {
            itemsAvailable: 1000n,
            symbol: 'NEW',
            sellerFeeBasisPoints: (0, umi_1.percentAmount)(2),
            maxEditionSupply: 2n,
            isMutable: false,
            creators: [{ address: creatorB, percentageShare: 100, verified: false }],
            configLineSettings: (0, umi_1.some)({
                prefixName: 'My New NFT #$ID+1$',
                nameLength: 0,
                prefixUri: 'https://my.app.com/nfts/$ID+1$',
                uriLength: 0,
                isSequential: false,
            }),
            hiddenSettings: (0, umi_1.none)(),
        },
    });
});
(0, ava_1.default)('it cannot update the number of items when using config line settings', async (t) => {
    // Given a Candy Machine using config line settings with 1000 items.
    const umi = await (0, _setup_1.createUmi)();
    const candyMachine = await (0, _setup_1.createV2)(umi, {
        itemsAvailable: 1000,
        configLineSettings: (0, umi_1.some)({
            prefixName: 'My NFT #',
            nameLength: 4,
            prefixUri: 'https://arweave.net/',
            uriLength: 50,
            isSequential: true,
        }),
    });
    const { data: originalData } = await (0, src_1.fetchCandyMachine)(umi, candyMachine.publicKey);
    // When we try to update the number of items to 2000.
    const promise = (0, umi_1.transactionBuilder)()
        .add((0, src_1.updateCandyMachine)(umi, {
        candyMachine: candyMachine.publicKey,
        data: { ...originalData, itemsAvailable: 2000 },
    }))
        .sendAndConfirm(umi);
    // Then we expect a program error.
    await t.throwsAsync(promise, { message: /CannotChangeNumberOfLines/ });
});
(0, ava_1.default)('it can update the number of items when using hidden settings', async (t) => {
    // Given a Candy Machine using hidden settings with 1000 items.
    const umi = await (0, _setup_1.createUmi)();
    const candyMachine = await (0, _setup_1.createV2)(umi, {
        itemsAvailable: 1000,
        configLineSettings: (0, umi_1.none)(),
        hiddenSettings: (0, umi_1.some)({
            name: 'My NFT #$ID+1$',
            uri: 'https://my.app.com/nfts/$ID+1$.json',
            hash: new Uint8Array(32),
        }),
    });
    const { data: originalData } = await (0, src_1.fetchCandyMachine)(umi, candyMachine.publicKey);
    // When we update the number of items to 2000.
    await (0, umi_1.transactionBuilder)()
        .add((0, src_1.updateCandyMachine)(umi, {
        candyMachine: candyMachine.publicKey,
        data: { ...originalData, itemsAvailable: 2000 },
    }))
        .sendAndConfirm(umi);
    // Then the Candy Machine's data was updated accordingly.
    const candyMachineAccount = await (0, src_1.fetchCandyMachine)(umi, candyMachine.publicKey);
    t.like(candyMachineAccount, {
        data: { itemsAvailable: 2000n },
    });
});
(0, ava_1.default)('it can update the hidden settings of a candy machine', async (t) => {
    // Given a Candy Machine using the following hidden settings.
    const umi = await (0, _setup_1.createUmi)();
    const candyMachine = await (0, _setup_1.createV2)(umi, {
        itemsAvailable: 1000,
        configLineSettings: (0, umi_1.none)(),
        hiddenSettings: (0, umi_1.some)({
            name: 'My Old NFT #$ID+1$',
            uri: 'https://old.app.com/nfts/$ID+1$.json',
            hash: new Uint8Array(Array(32).fill(1)),
        }),
    });
    const { data: originalData } = await (0, src_1.fetchCandyMachine)(umi, candyMachine.publicKey);
    // When we update its hidden settings to the following.
    await (0, umi_1.transactionBuilder)()
        .add((0, src_1.updateCandyMachine)(umi, {
        candyMachine: candyMachine.publicKey,
        data: {
            ...originalData,
            hiddenSettings: (0, umi_1.some)({
                name: 'My NFT NFT #$ID+1$',
                uri: 'https://nft.app.com/nfts/$ID+1$.json',
                hash: new Uint8Array(Array(32).fill(2)),
            }),
        },
    }))
        .sendAndConfirm(umi);
    // Then the Candy Machine's data was updated accordingly.
    const candyMachineAccount = await (0, src_1.fetchCandyMachine)(umi, candyMachine.publicKey);
    t.like(candyMachineAccount, {
        data: {
            hiddenSettings: (0, umi_1.some)({
                name: 'My NFT NFT #$ID+1$',
                uri: 'https://nft.app.com/nfts/$ID+1$.json',
                hash: new Uint8Array(Array(32).fill(2)),
            }),
        },
    });
});
(0, ava_1.default)('it cannot go from hidden settings to config line settings', async (t) => {
    // Given a Candy Machine using the following hidden settings.
    const umi = await (0, _setup_1.createUmi)();
    const candyMachine = await (0, _setup_1.createV2)(umi, {
        itemsAvailable: 1000,
        configLineSettings: (0, umi_1.none)(),
        hiddenSettings: (0, umi_1.some)({
            name: 'My NFT #$ID+1$',
            uri: 'https://my.app.com/nfts/$ID+1$.json',
            hash: new Uint8Array(32),
        }),
    });
    const { data: originalData } = await (0, src_1.fetchCandyMachine)(umi, candyMachine.publicKey);
    // When we try to update it so it uses config line settings instead.
    const promise = (0, umi_1.transactionBuilder)()
        .add((0, src_1.updateCandyMachine)(umi, {
        candyMachine: candyMachine.publicKey,
        data: {
            ...originalData,
            hiddenSettings: (0, umi_1.none)(),
            configLineSettings: (0, umi_1.some)({
                prefixName: 'My NFT #',
                nameLength: 4,
                prefixUri: 'https://arweave.net/',
                uriLength: 50,
                isSequential: true,
            }),
        },
    }))
        .sendAndConfirm(umi);
    // Then we expect a program error.
    await t.throwsAsync(promise, { message: /CannotSwitchFromHiddenSettings/ });
});
(0, ava_1.default)('it cannot go from config line settings to hidden settings', async (t) => {
    // Given a Candy Machine using the following config line settings.
    const umi = await (0, _setup_1.createUmi)();
    const candyMachine = await (0, _setup_1.createV2)(umi, {
        itemsAvailable: 1000,
        hiddenSettings: (0, umi_1.none)(),
        configLineSettings: (0, umi_1.some)({
            prefixName: 'My NFT #',
            nameLength: 4,
            prefixUri: 'https://arweave.net/',
            uriLength: 50,
            isSequential: true,
        }),
    });
    const { data: originalData } = await (0, src_1.fetchCandyMachine)(umi, candyMachine.publicKey);
    // When we try to update it so it uses hidden settings instead.
    const promise = (0, umi_1.transactionBuilder)()
        .add((0, src_1.updateCandyMachine)(umi, {
        candyMachine: candyMachine.publicKey,
        data: {
            ...originalData,
            configLineSettings: (0, umi_1.none)(),
            hiddenSettings: (0, umi_1.some)({
                name: 'My NFT #$ID+1$',
                uri: 'https://my.app.com/nfts/$ID+1$.json',
                hash: new Uint8Array(32),
            }),
        },
    }))
        .sendAndConfirm(umi);
    // Then we expect a program error.
    await t.throwsAsync(promise, { message: /CannotSwitchToHiddenSettings/ });
});
//# sourceMappingURL=updateCandyMachine.test.js.map