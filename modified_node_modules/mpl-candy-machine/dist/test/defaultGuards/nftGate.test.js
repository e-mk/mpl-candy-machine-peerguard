"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const umi_1 = require("@metaplex-foundation/umi");
const ava_1 = __importDefault(require("ava"));
const src_1 = require("../../src");
const _setup_1 = require("../_setup");
(0, ava_1.default)('it allows minting when the payer owns an NFT from a certain collection', async (t) => {
    // Given the identity owns an NFT from a certain collection.
    const umi = await (0, _setup_1.createUmi)();
    const requiredCollectionAuthority = (0, umi_1.generateSigner)(umi);
    const { publicKey: requiredCollection } = await (0, _setup_1.createCollectionNft)(umi, {
        authority: requiredCollectionAuthority,
    });
    const nftToVerify = await (0, _setup_1.createVerifiedNft)(umi, {
        tokenOwner: umi.identity.publicKey,
        collectionMint: requiredCollection,
        collectionAuthority: requiredCollectionAuthority,
    });
    // And a loaded Candy Machine with an nftGate guard.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            nftGate: (0, umi_1.some)({ requiredCollection }),
        },
    });
    // When we mint from it.
    const mint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            nftGate: (0, umi_1.some)({ mint: nftToVerify.publicKey }),
        },
    }))
        .sendAndConfirm(umi);
    // Then minting was successful.
    await (0, _setup_1.assertSuccessfulMint)(t, umi, { mint, owner: umi.identity });
});
(0, ava_1.default)('it allows minting even when the payer is different from the minter', async (t) => {
    // Given a separate minter that owns an NFT from a certain collection.
    const umi = await (0, _setup_1.createUmi)();
    const minter = (0, umi_1.generateSigner)(umi);
    const requiredCollectionAuthority = (0, umi_1.generateSigner)(umi);
    const { publicKey: requiredCollection } = await (0, _setup_1.createCollectionNft)(umi, {
        authority: requiredCollectionAuthority,
    });
    const nftToVerify = await (0, _setup_1.createVerifiedNft)(umi, {
        tokenOwner: minter.publicKey,
        collectionMint: requiredCollection,
        collectionAuthority: requiredCollectionAuthority,
    });
    // And a loaded Candy Machine with an nftGate guard.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            nftGate: (0, umi_1.some)({ requiredCollection }),
        },
    });
    // When we mint from it.
    const mint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        minter,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            nftGate: (0, umi_1.some)({ mint: nftToVerify.publicKey }),
        },
    }))
        .sendAndConfirm(umi);
    // Then minting was successful.
    await (0, _setup_1.assertSuccessfulMint)(t, umi, { mint, owner: minter });
});
(0, ava_1.default)('it allows minting when the NFT is not on an associated token account', async (t) => {
    // Given a payer that owns an NFT from a certain collection on a non-associated token account.
    const umi = await (0, _setup_1.createUmi)();
    const requiredCollectionAuthority = (0, umi_1.generateSigner)(umi);
    const { publicKey: requiredCollection } = await (0, _setup_1.createCollectionNft)(umi, {
        authority: requiredCollectionAuthority,
    });
    const nftToVerify = (0, umi_1.generateSigner)(umi);
    const nftToVerifyToken = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.createMint)(umi, { mint: nftToVerify }))
        .add((0, mpl_toolbox_1.createToken)(umi, {
        mint: nftToVerify.publicKey,
        owner: umi.identity.publicKey,
        token: nftToVerifyToken,
    }))
        .sendAndConfirm(umi);
    await (0, _setup_1.createVerifiedNft)(umi, {
        mint: nftToVerify,
        tokenOwner: umi.identity.publicKey,
        token: nftToVerifyToken.publicKey,
        collectionMint: requiredCollection,
        collectionAuthority: requiredCollectionAuthority,
    });
    // And a loaded Candy Machine with an nftGate guard.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            nftGate: (0, umi_1.some)({ requiredCollection }),
        },
    });
    // When we mint from it by providing the mint and token addresses.
    const mint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            nftGate: (0, umi_1.some)({
                mint: nftToVerify.publicKey,
                tokenAccount: nftToVerifyToken.publicKey,
            }),
        },
    }))
        .sendAndConfirm(umi);
    // Then minting was successful.
    await (0, _setup_1.assertSuccessfulMint)(t, umi, { mint, owner: umi.identity });
});
(0, ava_1.default)('it forbids minting when the payer does not own an NFT from a certain collection', async (t) => {
    // Given the identity owns an NFT from a certain collection.
    const umi = await (0, _setup_1.createUmi)();
    const requiredCollectionAuthority = (0, umi_1.generateSigner)(umi);
    const { publicKey: requiredCollection } = await (0, _setup_1.createCollectionNft)(umi, {
        authority: requiredCollectionAuthority,
    });
    const { publicKey: nftToVerify } = await (0, _setup_1.createVerifiedNft)(umi, {
        tokenOwner: umi.identity.publicKey,
        collectionMint: requiredCollection,
        collectionAuthority: requiredCollectionAuthority,
    });
    // But sent their NFT to another wallet.
    const destination = (0, umi_1.generateSigner)(umi).publicKey;
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.createAssociatedToken)(umi, { mint: nftToVerify, owner: destination }))
        .add((0, mpl_toolbox_1.transferTokens)(umi, {
        authority: umi.identity,
        source: (0, mpl_toolbox_1.findAssociatedTokenPda)(umi, {
            mint: nftToVerify,
            owner: umi.identity.publicKey,
        }),
        destination: (0, mpl_toolbox_1.findAssociatedTokenPda)(umi, {
            mint: nftToVerify,
            owner: destination,
        }),
        amount: 1,
    }))
        .sendAndConfirm(umi);
    // And a loaded Candy Machine with an nftGate guard on that collection.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            nftGate: (0, umi_1.some)({ requiredCollection }),
        },
    });
    // When the payer tries to mint from it.
    const mint = (0, umi_1.generateSigner)(umi);
    const promise = (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            nftGate: (0, umi_1.some)({ mint: nftToVerify }),
        },
    }))
        .sendAndConfirm(umi);
    // Then we expect an error.
    await t.throwsAsync(promise, { message: /MissingNft/ });
});
(0, ava_1.default)('it forbids minting when the payer tries to provide an NFT from the wrong collection', async (t) => {
    // Given the identity owns an NFT from a collection A.
    const umi = await (0, _setup_1.createUmi)();
    const requiredCollectionAuthorityA = (0, umi_1.generateSigner)(umi);
    const { publicKey: requiredCollectionA } = await (0, _setup_1.createCollectionNft)(umi, {
        authority: requiredCollectionAuthorityA,
    });
    const { publicKey: nftToVerify } = await (0, _setup_1.createVerifiedNft)(umi, {
        tokenOwner: umi.identity.publicKey,
        collectionMint: requiredCollectionA,
        collectionAuthority: requiredCollectionAuthorityA,
    });
    // And a loaded Candy Machine with an nftGate guard on a Collection B.
    const requiredCollectionAuthorityB = (0, umi_1.generateSigner)(umi);
    const { publicKey: requiredCollectionB } = await (0, _setup_1.createCollectionNft)(umi, {
        authority: requiredCollectionAuthorityB,
    });
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            nftGate: (0, umi_1.some)({ requiredCollection: requiredCollectionB }),
        },
    });
    // When the identity tries to mint from it using its collection A NFT.
    const mint = (0, umi_1.generateSigner)(umi);
    const promise = (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            nftGate: (0, umi_1.some)({ mint: nftToVerify }),
        },
    }))
        .sendAndConfirm(umi);
    // Then we expect an error.
    await t.throwsAsync(promise, { message: /InvalidNftCollection/ });
});
(0, ava_1.default)('it forbids minting when the payer tries to provide an NFT from an unverified collection', async (t) => {
    // Given a payer that owns an unverified NFT from a certain collection.
    const umi = await (0, _setup_1.createUmi)();
    const requiredCollectionAuthority = (0, umi_1.generateSigner)(umi);
    const { publicKey: requiredCollection } = await (0, _setup_1.createCollectionNft)(umi, {
        authority: requiredCollectionAuthority,
    });
    const { publicKey: nftToVerify } = await (0, _setup_1.createNft)(umi, {
        tokenOwner: umi.identity.publicKey,
    });
    // And a loaded Candy Machine with an nftGate guard.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            nftGate: (0, umi_1.some)({ requiredCollection }),
        },
    });
    // When the payer tries to mint from it using its unverified NFT.
    const mint = (0, umi_1.generateSigner)(umi);
    const promise = (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            nftGate: (0, umi_1.some)({ mint: nftToVerify }),
        },
    }))
        .sendAndConfirm(umi);
    // Then we expect an error.
    await t.throwsAsync(promise, { message: /InvalidNftCollection/ });
});
(0, ava_1.default)('it charges a bot tax when trying to mint without owning the right NFT', async (t) => {
    // Given a loaded Candy Machine with an nftGate guard and a bot tax guard.
    const umi = await (0, _setup_1.createUmi)();
    const { publicKey: requiredCollection } = await (0, _setup_1.createCollectionNft)(umi);
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            botTax: (0, umi_1.some)({ lamports: (0, umi_1.sol)(0.1), lastInstruction: true }),
            nftGate: (0, umi_1.some)({ requiredCollection }),
        },
    });
    // When we try to mint from it using any NFT that's not from the required collection.
    const wrongNft = await (0, _setup_1.createNft)(umi);
    const mint = (0, umi_1.generateSigner)(umi);
    const { signature } = await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            nftGate: (0, umi_1.some)({ mint: wrongNft.publicKey }),
        },
    }))
        .sendAndConfirm(umi);
    // Then we expect a bot tax error.
    await (0, _setup_1.assertBotTax)(t, umi, mint, signature, /InvalidNftCollection/);
});
//# sourceMappingURL=nftGate.test.js.map