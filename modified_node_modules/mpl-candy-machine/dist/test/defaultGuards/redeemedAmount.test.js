"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const umi_1 = require("@metaplex-foundation/umi");
const ava_1 = __importDefault(require("ava"));
const src_1 = require("../../src");
const _setup_1 = require("../_setup");
(0, ava_1.default)('it allows minting until a threshold of NFTs have been redeemed', async (t) => {
    // Given a loaded Candy Machine with a redeemedAmount guard with a threshold of 1 NFT.
    const umi = await (0, _setup_1.createUmi)();
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [
            { name: 'Degen #1', uri: 'https://example.com/degen/1' },
            { name: 'Degen #1', uri: 'https://example.com/degen/1' },
        ],
        guards: {
            redeemedAmount: (0, umi_1.some)({ maximum: 1 }),
        },
    });
    // When we mint its first item.
    const mint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
    }))
        .sendAndConfirm(umi);
    // Then minting was successful.
    await (0, _setup_1.assertSuccessfulMint)(t, umi, { mint, owner: umi.identity });
});
(0, ava_1.default)('it forbids minting once the redeemed threshold has been reached', async (t) => {
    // Given a loaded Candy Machine with a redeemedAmount guard with a threshold of 1 NFT.
    const umi = await (0, _setup_1.createUmi)();
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [
            { name: 'Degen #1', uri: 'https://example.com/degen/1' },
            { name: 'Degen #1', uri: 'https://example.com/degen/1' },
        ],
        guards: {
            redeemedAmount: (0, umi_1.some)({ maximum: 1 }),
        },
    });
    // And assuming its first item has already been minted.
    const mintA = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mintA,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
    }))
        .sendAndConfirm(umi);
    await (0, _setup_1.assertSuccessfulMint)(t, umi, { mint: mintA, owner: umi.identity });
    // When we try to mint its second item.
    const mintB = (0, umi_1.generateSigner)(umi);
    const promise = (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mintB,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
    }))
        .sendAndConfirm(umi);
    // Then we expect a program error.
    await t.throwsAsync(promise, { message: /MaximumRedeemedAmount/ });
});
(0, ava_1.default)('it charges a bot tax when trying to mint once the threshold has been reached', async (t) => {
    // Given a loaded Candy Machine with a bot tax guard
    // and a redeemedAmount guard with a threshold of 1 NFT.
    const umi = await (0, _setup_1.createUmi)();
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [
            { name: 'Degen #1', uri: 'https://example.com/degen/1' },
            { name: 'Degen #1', uri: 'https://example.com/degen/1' },
        ],
        guards: {
            botTax: (0, umi_1.some)({ lamports: (0, umi_1.sol)(0.1), lastInstruction: true }),
            redeemedAmount: (0, umi_1.some)({ maximum: 1 }),
        },
    });
    // And assuming its first item has already been minted.
    const mintA = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mintA,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
    }))
        .sendAndConfirm(umi);
    await (0, _setup_1.assertSuccessfulMint)(t, umi, { mint: mintA, owner: umi.identity });
    // When we try to mint its second item.
    const mintB = (0, umi_1.generateSigner)(umi);
    const { signature } = await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mintB,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
    }))
        .sendAndConfirm(umi);
    // Then we expect a silent bot tax error.
    await (0, _setup_1.assertBotTax)(t, umi, mintB, signature, /MaximumRedeemedAmount/);
});
//# sourceMappingURL=redeemedAmount.test.js.map