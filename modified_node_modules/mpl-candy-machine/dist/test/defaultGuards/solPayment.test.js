"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const umi_1 = require("@metaplex-foundation/umi");
const ava_1 = __importDefault(require("ava"));
const umi_bundle_tests_1 = require("@metaplex-foundation/umi-bundle-tests");
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const _setup_1 = require("../_setup");
const src_1 = require("../../src");
(0, ava_1.default)('it transfers SOL from the payer to the destination', async (t) => {
    // Given a loaded Candy Machine with a solPayment guard.
    const umi = await (0, _setup_1.createUmi)();
    const destination = (0, umi_1.generateSigner)(umi).publicKey;
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            solPayment: (0, umi_1.some)({ lamports: (0, umi_1.sol)(1), destination }),
        },
    });
    // When we mint for another owner using an explicit payer.
    const payer = await (0, umi_bundle_tests_1.generateSignerWithSol)(umi, (0, umi_1.sol)(10));
    const minter = (0, umi_1.generateSigner)(umi);
    const mint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        minter,
        payer,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: { solPayment: (0, umi_1.some)({ destination }) },
    }))
        .sendAndConfirm(umi);
    // Then minting was successful.
    await (0, _setup_1.assertSuccessfulMint)(t, umi, { mint, owner: minter });
    // And the treasury received SOLs.
    const treasuryBalance = await umi.rpc.getBalance(destination);
    t.true((0, umi_1.isEqualToAmount)(treasuryBalance, (0, umi_1.sol)(1)), 'treasury received SOLs');
    // And the payer lost SOLs.
    const payerBalance = await umi.rpc.getBalance(payer.publicKey);
    t.true((0, umi_1.isEqualToAmount)(payerBalance, (0, umi_1.sol)(9), (0, umi_1.sol)(0.1)), 'payer lost SOLs');
});
(0, ava_1.default)('it fails if the payer does not have enough funds', async (t) => {
    // Given a loaded Candy Machine with a solPayment guard costing 5 SOLs.
    const umi = await (0, _setup_1.createUmi)();
    const destination = (0, umi_1.generateSigner)(umi).publicKey;
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            solPayment: (0, umi_1.some)({ lamports: (0, umi_1.sol)(5), destination }),
        },
    });
    // When we mint from it using a payer that only has 4 SOL.
    const payer = await (0, umi_bundle_tests_1.generateSignerWithSol)(umi, (0, umi_1.sol)(4));
    const mint = (0, umi_1.generateSigner)(umi);
    const promise = (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        payer,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: { solPayment: (0, umi_1.some)({ destination }) },
    }))
        .sendAndConfirm(umi);
    // Then we expect an error.
    await t.throwsAsync(promise, { message: /NotEnoughSOL/ });
    // And the payer didn't loose any SOL.
    const payerBalance = await umi.rpc.getBalance(payer.publicKey);
    t.true((0, umi_1.isEqualToAmount)(payerBalance, (0, umi_1.sol)(4)), 'payer did not lose SOLs');
});
(0, ava_1.default)('it charges a bot tax if the payer does not have enough funds', async (t) => {
    // Given a loaded Candy Machine with a solPayment guard costing 5 SOLs and a botTax guard.
    const umi = await (0, _setup_1.createUmi)();
    const destination = (0, umi_1.generateSigner)(umi).publicKey;
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            botTax: (0, umi_1.some)({ lamports: (0, umi_1.sol)(0.1), lastInstruction: true }),
            solPayment: (0, umi_1.some)({ lamports: (0, umi_1.sol)(5), destination }),
        },
    });
    // When we mint from it using a payer that only has 4 SOL.
    const payer = await (0, umi_bundle_tests_1.generateSignerWithSol)(umi, (0, umi_1.sol)(4));
    const mint = (0, umi_1.generateSigner)(umi);
    const { signature } = await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        payer,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: { solPayment: (0, umi_1.some)({ destination }) },
    }))
        .sendAndConfirm(umi);
    // Then we expect a bot tax error.
    await (0, _setup_1.assertBotTax)(t, umi, mint, signature, /NotEnoughSOL/);
});
//# sourceMappingURL=solPayment.test.js.map