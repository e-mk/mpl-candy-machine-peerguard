"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const umi_1 = require("@metaplex-foundation/umi");
const ava_1 = __importDefault(require("ava"));
const src_1 = require("../../src");
const _setup_1 = require("../_setup");
(0, ava_1.default)('it transfers tokens from the payer to the destination', async (t) => {
    // Given a mint account such that:
    // - The destination treasury has 100 tokens.
    // - The payer has 12 tokens.
    const umi = await (0, _setup_1.createUmi)();
    const destination = (0, umi_1.generateSigner)(umi).publicKey;
    const [tokenMint, destinationAta, identityAta] = await (0, _setup_1.createMintWithHolders)(umi, {
        holders: [
            { owner: destination, amount: 100 },
            { owner: umi.identity, amount: 12 },
        ],
    });
    // And a loaded Candy Machine with a tokenPayment guard that requires 5 tokens.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            tokenPayment: (0, umi_1.some)({
                mint: tokenMint.publicKey,
                destinationAta,
                amount: 5,
            }),
        },
    });
    // When we mint from it.
    const mint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            tokenPayment: (0, umi_1.some)({ mint: tokenMint.publicKey, destinationAta }),
        },
    }))
        .sendAndConfirm(umi);
    // Then minting was successful.
    await (0, _setup_1.assertSuccessfulMint)(t, umi, { mint, owner: umi.identity });
    // And the treasury token received 5 tokens.
    const destinationTokenAccount = await (0, mpl_toolbox_1.fetchToken)(umi, destinationAta);
    t.is(destinationTokenAccount.amount, 105n);
    // And the payer lost 5 tokens.
    const payerTokenAccount = await (0, mpl_toolbox_1.fetchToken)(umi, identityAta);
    t.is(payerTokenAccount.amount, 7n);
});
(0, ava_1.default)('it allows minting even when the payer is different from the minter', async (t) => {
    // Given a mint account such that:
    // - The destination treasury has 100 tokens.
    // - An explicit minter has 12 tokens.
    const umi = await (0, _setup_1.createUmi)();
    const minter = (0, umi_1.generateSigner)(umi);
    const destination = (0, umi_1.generateSigner)(umi).publicKey;
    const [tokenMint, destinationAta, minterAta] = await (0, _setup_1.createMintWithHolders)(umi, {
        holders: [
            { owner: destination, amount: 100 },
            { owner: minter, amount: 12 },
        ],
    });
    // And a loaded Candy Machine with a tokenPayment guard that requires 5 tokens.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            tokenPayment: (0, umi_1.some)({
                mint: tokenMint.publicKey,
                destinationAta,
                amount: 5,
            }),
        },
    });
    // When the minter mints from it.
    const mint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        minter,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            tokenPayment: (0, umi_1.some)({ mint: tokenMint.publicKey, destinationAta }),
        },
    }))
        .sendAndConfirm(umi);
    // Then minting was successful.
    await (0, _setup_1.assertSuccessfulMint)(t, umi, { mint, owner: minter });
    // And the treasury token received 5 tokens.
    const destinationTokenAccount = await (0, mpl_toolbox_1.fetchToken)(umi, destinationAta);
    t.is(destinationTokenAccount.amount, 105n);
    // And the minter lost 5 tokens.
    const minterTokenAccount = await (0, mpl_toolbox_1.fetchToken)(umi, minterAta);
    t.is(minterTokenAccount.amount, 7n);
});
(0, ava_1.default)('it fails if the payer does not have enough tokens', async (t) => {
    // Given a mint account such that the payer has 4 tokens.
    const umi = await (0, _setup_1.createUmi)();
    const destination = (0, umi_1.generateSigner)(umi).publicKey;
    const [tokenMint, destinationAta, identityAta] = await (0, _setup_1.createMintWithHolders)(umi, {
        holders: [
            { owner: destination, amount: 0 },
            { owner: umi.identity, amount: 4 },
        ],
    });
    // And a loaded Candy Machine with a tokenPayment guard that requires 5 tokens.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            tokenPayment: (0, umi_1.some)({
                mint: tokenMint.publicKey,
                destinationAta,
                amount: 5,
            }),
        },
    });
    // When we try to mint from it.
    const mint = (0, umi_1.generateSigner)(umi);
    const promise = (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            tokenPayment: (0, umi_1.some)({ mint: tokenMint.publicKey, destinationAta }),
        },
    }))
        .sendAndConfirm(umi);
    // Then we expect a program error.
    await t.throwsAsync(promise, { message: /NotEnoughTokens/ });
    // And the payer still has 4 tokens.
    const payerTokenAccount = await (0, mpl_toolbox_1.fetchToken)(umi, identityAta);
    t.is(payerTokenAccount.amount, 4n);
});
(0, ava_1.default)('it charges a bot tax if the payer does not have enough tokens', async (t) => {
    // Given a mint account such that the payer has 4 tokens.
    const umi = await (0, _setup_1.createUmi)();
    const destination = (0, umi_1.generateSigner)(umi).publicKey;
    const [tokenMint, destinationAta, identityAta] = await (0, _setup_1.createMintWithHolders)(umi, {
        holders: [
            { owner: destination, amount: 0 },
            { owner: umi.identity, amount: 4 },
        ],
    });
    // And a loaded Candy Machine with a bot tax guard and a tokenPayment guard that requires 5 tokens.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            botTax: (0, umi_1.some)({ lamports: (0, umi_1.sol)(0.1), lastInstruction: true }),
            tokenPayment: (0, umi_1.some)({
                mint: tokenMint.publicKey,
                destinationAta,
                amount: 5,
            }),
        },
    });
    // When we try to mint from it.
    const mint = (0, umi_1.generateSigner)(umi);
    const { signature } = await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            tokenPayment: (0, umi_1.some)({ mint: tokenMint.publicKey, destinationAta }),
        },
    }))
        .sendAndConfirm(umi);
    // Then we expect a silent bot tax error.
    await (0, _setup_1.assertBotTax)(t, umi, mint, signature, /NotEnoughTokens/);
    // And the payer still has 4 tokens.
    const payerTokenAccount = await (0, mpl_toolbox_1.fetchToken)(umi, identityAta);
    t.is(payerTokenAccount.amount, 4n);
});
//# sourceMappingURL=tokenPayment.test.js.map