"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const umi_1 = require("@metaplex-foundation/umi");
const ava_1 = __importDefault(require("ava"));
const src_1 = require("../../src");
const _setup_1 = require("../_setup");
(0, ava_1.default)('it allows minting when the payer owns a specific token', async (t) => {
    // Given a payer with one token.
    const umi = await (0, _setup_1.createUmi)();
    const tokenMint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.createMintWithAssociatedToken)(umi, {
        mint: tokenMint,
        owner: umi.identity.publicKey,
        amount: 1,
    }))
        .sendAndConfirm(umi);
    // And a loaded Candy Machine with the token gate guard.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            tokenGate: (0, umi_1.some)({ mint: tokenMint.publicKey, amount: 1 }),
        },
    });
    // When the payer mints from it.
    const mint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            tokenGate: (0, umi_1.some)({ mint: tokenMint.publicKey }),
        },
    }))
        .sendAndConfirm(umi);
    // Then minting was successful.
    await (0, _setup_1.assertSuccessfulMint)(t, umi, { mint, owner: umi.identity });
});
(0, ava_1.default)('it allows minting even when the payer is different from the minter', async (t) => {
    // Given an explicit minter with one token.
    const umi = await (0, _setup_1.createUmi)();
    const minter = (0, umi_1.generateSigner)(umi);
    const tokenMint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.createMintWithAssociatedToken)(umi, {
        mint: tokenMint,
        owner: minter.publicKey,
        amount: 1,
    }))
        .sendAndConfirm(umi);
    // And a loaded Candy Machine with the token gate guard.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            tokenGate: (0, umi_1.some)({ mint: tokenMint.publicKey, amount: 1 }),
        },
    });
    // When the minter mints from it.
    const mint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        minter,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            tokenGate: (0, umi_1.some)({ mint: tokenMint.publicKey }),
        },
    }))
        .sendAndConfirm(umi);
    // Then minting was successful.
    await (0, _setup_1.assertSuccessfulMint)(t, umi, { mint, owner: minter });
});
(0, ava_1.default)('it allows minting when the payer owns multiple tokens from a specific mint', async (t) => {
    // Given a payer with 42 tokens.
    const umi = await (0, _setup_1.createUmi)();
    const tokenMint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.createMintWithAssociatedToken)(umi, {
        mint: tokenMint,
        owner: umi.identity.publicKey,
        amount: 42,
    }))
        .sendAndConfirm(umi);
    // And a loaded Candy Machine with the token gate guard that requires 5 tokens.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            tokenGate: (0, umi_1.some)({ mint: tokenMint.publicKey, amount: 5 }),
        },
    });
    // When the payer mints from it.
    const mint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            tokenGate: (0, umi_1.some)({ mint: tokenMint.publicKey }),
        },
    }))
        .sendAndConfirm(umi);
    // Then minting was successful.
    await (0, _setup_1.assertSuccessfulMint)(t, umi, { mint, owner: umi.identity });
    // And the payer still has 42 tokens.
    const tokenAccount = await (0, mpl_toolbox_1.fetchToken)(umi, (0, mpl_toolbox_1.findAssociatedTokenPda)(umi, {
        mint: tokenMint.publicKey,
        owner: umi.identity.publicKey,
    }));
    t.is(tokenAccount.amount, 42n);
});
(0, ava_1.default)('it forbids minting when the owner does not own any required tokens', async (t) => {
    // Given a payer with zero tokens.
    const umi = await (0, _setup_1.createUmi)();
    const tokenMint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.createMintWithAssociatedToken)(umi, {
        mint: tokenMint,
        owner: umi.identity.publicKey,
        amount: 0,
    }))
        .sendAndConfirm(umi);
    // And a loaded Candy Machine with the token gate guard.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            tokenGate: (0, umi_1.some)({ mint: tokenMint.publicKey, amount: 1 }),
        },
    });
    // When the payer tries to mint from it.
    const mint = (0, umi_1.generateSigner)(umi);
    const promise = (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            tokenGate: (0, umi_1.some)({ mint: tokenMint.publicKey }),
        },
    }))
        .sendAndConfirm(umi);
    // Then we expect an error.
    await t.throwsAsync(promise, { message: /NotEnoughTokens/ });
});
(0, ava_1.default)('it forbids minting when the owner does not own enough tokens', async (t) => {
    // Given a payer with 5 tokens.
    const umi = await (0, _setup_1.createUmi)();
    const tokenMint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.createMintWithAssociatedToken)(umi, {
        mint: tokenMint,
        owner: umi.identity.publicKey,
        amount: 5,
    }))
        .sendAndConfirm(umi);
    // And a loaded Candy Machine with the token gate guard that requires 10 tokens.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            tokenGate: (0, umi_1.some)({ mint: tokenMint.publicKey, amount: 10 }),
        },
    });
    // When the payer tries to mint from it.
    const mint = (0, umi_1.generateSigner)(umi);
    const promise = (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            tokenGate: (0, umi_1.some)({ mint: tokenMint.publicKey }),
        },
    }))
        .sendAndConfirm(umi);
    // Then we expect an error.
    await t.throwsAsync(promise, { message: /NotEnoughTokens/ });
});
(0, ava_1.default)('it charges a bot tax when trying to mint without the right amount of tokens', async (t) => {
    // Given a payer with zero tokens.
    const umi = await (0, _setup_1.createUmi)();
    const tokenMint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.createMintWithAssociatedToken)(umi, {
        mint: tokenMint,
        owner: umi.identity.publicKey,
        amount: 0,
    }))
        .sendAndConfirm(umi);
    // And a loaded Candy Machine with the token gate guard and a bot tax guard.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            botTax: (0, umi_1.some)({ lamports: (0, umi_1.sol)(0.1), lastInstruction: true }),
            tokenGate: (0, umi_1.some)({ mint: tokenMint.publicKey, amount: 1 }),
        },
    });
    // When the payer tries to mint from it.
    const mint = (0, umi_1.generateSigner)(umi);
    const { signature } = await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            tokenGate: (0, umi_1.some)({ mint: tokenMint.publicKey }),
        },
    }))
        .sendAndConfirm(umi);
    // Then we expect a silent bot tax error.
    await (0, _setup_1.assertBotTax)(t, umi, mint, signature, /NotEnoughTokens/);
});
//# sourceMappingURL=tokenGate.test.js.map