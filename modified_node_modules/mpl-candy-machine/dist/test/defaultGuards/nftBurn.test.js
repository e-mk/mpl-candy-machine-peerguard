"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const umi_1 = require("@metaplex-foundation/umi");
const ava_1 = __importDefault(require("ava"));
const mpl_token_metadata_1 = require("@metaplex-foundation/mpl-token-metadata");
const src_1 = require("../../src");
const _setup_1 = require("../_setup");
(0, ava_1.default)('it burns a specific NFT to allow minting', async (t) => {
    // Given the identity owns an NFT from a certain collection.
    const umi = await (0, _setup_1.createUmi)();
    const requiredCollectionAuthority = (0, umi_1.generateSigner)(umi);
    const { publicKey: requiredCollection } = await (0, _setup_1.createCollectionNft)(umi, {
        authority: requiredCollectionAuthority,
    });
    const nftToBurn = await (0, _setup_1.createVerifiedNft)(umi, {
        tokenOwner: umi.identity.publicKey,
        collectionMint: requiredCollection,
        collectionAuthority: requiredCollectionAuthority,
    });
    // And a loaded Candy Machine with an nftBurn guard on that collection.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            nftBurn: (0, umi_1.some)({ requiredCollection }),
        },
    });
    // When the identity mints from it using its NFT to burn.
    const mint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            nftBurn: (0, umi_1.some)({
                tokenStandard: mpl_token_metadata_1.TokenStandard.NonFungible,
                requiredCollection,
                mint: nftToBurn.publicKey,
            }),
        },
    }))
        .sendAndConfirm(umi);
    // Then minting was successful.
    await (0, _setup_1.assertSuccessfulMint)(t, umi, { mint, owner: umi.identity });
    // And the NFT was burned.
    await (0, _setup_1.assertBurnedNft)(t, umi, nftToBurn, umi.identity);
});
(0, ava_1.default)('it allows minting even when the payer is different from the minter', async (t) => {
    // Given a separate minter owns an NFT from a certain collection.
    const umi = await (0, _setup_1.createUmi)();
    const minter = (0, umi_1.generateSigner)(umi);
    const requiredCollectionAuthority = (0, umi_1.generateSigner)(umi);
    const { publicKey: requiredCollection } = await (0, _setup_1.createCollectionNft)(umi, {
        authority: requiredCollectionAuthority,
    });
    const nftToBurn = await (0, _setup_1.createVerifiedNft)(umi, {
        tokenOwner: minter.publicKey,
        collectionMint: requiredCollection,
        collectionAuthority: requiredCollectionAuthority,
    });
    // And a loaded Candy Machine with an nftBurn guard on that collection.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            nftBurn: (0, umi_1.some)({ requiredCollection }),
        },
    });
    // When the minter mints from it using its NFT to burn.
    const mint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        minter,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            nftBurn: (0, umi_1.some)({
                tokenStandard: mpl_token_metadata_1.TokenStandard.NonFungible,
                requiredCollection,
                mint: nftToBurn.publicKey,
            }),
        },
    }))
        .sendAndConfirm(umi);
    // Then minting was successful.
    await (0, _setup_1.assertSuccessfulMint)(t, umi, { mint, owner: minter });
    // And the NFT was burned.
    await (0, _setup_1.assertBurnedNft)(t, umi, nftToBurn, minter);
});
(0, ava_1.default)('it fails if there is not valid NFT to burn', async (t) => {
    // Given a loaded Candy Machine with an nftBurn guard on a specific collection.
    const umi = await (0, _setup_1.createUmi)();
    const requiredCollection = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            nftBurn: (0, umi_1.some)({ requiredCollection }),
        },
    });
    // When we try to mint from it using an NFT that's not part of this collection.
    const nftToBurn = await (0, _setup_1.createNft)(umi);
    const mint = (0, umi_1.generateSigner)(umi);
    const promise = (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            nftBurn: (0, umi_1.some)({
                tokenStandard: mpl_token_metadata_1.TokenStandard.NonFungible,
                requiredCollection,
                mint: nftToBurn.publicKey,
            }),
        },
    }))
        .sendAndConfirm(umi);
    // Then we expect an error.
    await t.throwsAsync(promise, { message: /InvalidNftCollection/ });
});
(0, ava_1.default)('it charges a bot tax when trying to mint using the wrong NFT', async (t) => {
    // Given a loaded Candy Machine with a botTax guard and
    // an nftBurn guard on a specific collection.
    const umi = await (0, _setup_1.createUmi)();
    const requiredCollection = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            botTax: (0, umi_1.some)({ lamports: (0, umi_1.sol)(0.01), lastInstruction: true }),
            nftBurn: (0, umi_1.some)({ requiredCollection }),
        },
    });
    // When we try to mint from it using an NFT that's not part of this collection.
    const nftToBurn = await (0, _setup_1.createNft)(umi);
    const mint = (0, umi_1.generateSigner)(umi);
    const { signature } = await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            nftBurn: (0, umi_1.some)({
                tokenStandard: mpl_token_metadata_1.TokenStandard.NonFungible,
                requiredCollection,
                mint: nftToBurn.publicKey,
            }),
        },
    }))
        .sendAndConfirm(umi);
    // Then we expect a bot tax error.
    await (0, _setup_1.assertBotTax)(t, umi, mint, signature, /InvalidNftCollection/);
});
(0, ava_1.default)('it burns a specific Programmable NFT to allow minting', async (t) => {
    // Given the identity owns an NFT from a certain collection.
    const umi = await (0, _setup_1.createUmi)();
    const requiredCollectionAuthority = (0, umi_1.generateSigner)(umi);
    const { publicKey: requiredCollection } = await (0, _setup_1.createCollectionNft)(umi, {
        authority: requiredCollectionAuthority,
    });
    const pnftToBurn = await (0, _setup_1.createVerifiedProgrammableNft)(umi, {
        tokenOwner: umi.identity.publicKey,
        collectionMint: requiredCollection,
        collectionAuthority: requiredCollectionAuthority,
    });
    // And a loaded Candy Machine with an nftBurn guard on that collection.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            nftBurn: (0, umi_1.some)({ requiredCollection }),
        },
    });
    // When the identity mints from it using its pNFT to burn.
    const mint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            nftBurn: (0, umi_1.some)({
                tokenStandard: mpl_token_metadata_1.TokenStandard.ProgrammableNonFungible,
                requiredCollection,
                mint: pnftToBurn.publicKey,
            }),
        },
    }))
        .sendAndConfirm(umi);
    // Then minting was successful.
    await (0, _setup_1.assertSuccessfulMint)(t, umi, { mint, owner: umi.identity });
    // And the NFT was burned.
    await (0, _setup_1.assertBurnedNft)(t, umi, pnftToBurn, umi.identity);
});
//# sourceMappingURL=nftBurn.test.js.map