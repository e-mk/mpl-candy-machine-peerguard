"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const umi_1 = require("@metaplex-foundation/umi");
const ava_1 = __importDefault(require("ava"));
const src_1 = require("../../src");
const _setup_1 = require("../_setup");
(0, ava_1.default)('it allows minting with specified program in transaction', async (t) => {
    // Given a loaded Candy Machine with a programGate guard allowing the memo program.
    const umi = await (0, _setup_1.createUmi)();
    const memoProgram = (0, mpl_toolbox_1.getSplMemoProgramId)(umi);
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            programGate: (0, umi_1.some)({ additional: [memoProgram] }),
        },
    });
    // When we mint an NFT with a memo instruction in the transaction.
    const mint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, mpl_toolbox_1.addMemo)(umi, { memo: 'Instruction from the Memo program' }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
    }))
        .sendAndConfirm(umi);
    // Then minting was successful.
    await (0, _setup_1.assertSuccessfulMint)(t, umi, { mint, owner: umi.identity });
});
(0, ava_1.default)('it allows minting even when the payer is different from the minter', async (t) => {
    // Given a loaded Candy Machine with a programGate guard allowing the memo program.
    const umi = await (0, _setup_1.createUmi)();
    const memoProgram = (0, mpl_toolbox_1.getSplMemoProgramId)(umi);
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            programGate: (0, umi_1.some)({ additional: [memoProgram] }),
        },
    });
    // When we mint an NFT with a memo instruction in the transaction
    // using an explicit minter.
    const mint = (0, umi_1.generateSigner)(umi);
    const minter = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, mpl_toolbox_1.addMemo)(umi, { memo: 'Instruction from the Memo program' }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        minter,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
    }))
        .sendAndConfirm(umi);
    // Then minting was successful.
    await (0, _setup_1.assertSuccessfulMint)(t, umi, { mint, owner: minter });
});
(0, ava_1.default)('it forbids minting with unspecified program in transaction', async (t) => {
    // Given a loaded Candy Machine with a programGate guard allowing no additional programs.
    const umi = await (0, _setup_1.createUmi)();
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            programGate: (0, umi_1.some)({ additional: [] }),
        },
    });
    // When we try to mint an NFT with a memo instruction in the transaction.
    const mint = (0, umi_1.generateSigner)(umi);
    const promise = (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, mpl_toolbox_1.addMemo)(umi, { memo: 'Instruction from the Memo program' }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
    }))
        .sendAndConfirm(umi);
    // Then we expect a program error.
    await t.throwsAsync(promise, { message: /UnauthorizedProgramFound/ });
});
(0, ava_1.default)('it forbids candy machine creation with more than 5 specified programs', async (t) => {
    // When we try to create a Candy Machine with a
    // programGate guard allowing more than 5 programs.
    const umi = await (0, _setup_1.createUmi)();
    const memoProgram = (0, mpl_toolbox_1.getSplMemoProgramId)(umi);
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const promise = (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            programGate: (0, umi_1.some)({ additional: Array(6).fill(memoProgram) }),
        },
    });
    // Then we expect a client error.
    await t.throwsAsync(promise, {
        name: 'MaximumOfFiveAdditionalProgramsError',
    });
});
(0, ava_1.default)('it charges a bot tax when minting with unspecified program in transaction', async (t) => {
    // Given a loaded Candy Machine with a botTax guard
    // and a programGate guard allowing no additional programs.
    const umi = await (0, _setup_1.createUmi)();
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            botTax: (0, umi_1.some)({ lamports: (0, umi_1.sol)(0.1), lastInstruction: true }),
            programGate: (0, umi_1.some)({ additional: [] }),
        },
    });
    // When we try to mint an NFT with a memo instruction in the transaction.
    const mint = (0, umi_1.generateSigner)(umi);
    const { signature } = await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, mpl_toolbox_1.addMemo)(umi, { memo: 'Instruction from the Memo program' }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
    }))
        .sendAndConfirm(umi);
    // Then we expect a silent bot tax error.
    await (0, _setup_1.assertBotTax)(t, umi, mint, signature, /UnauthorizedProgramFound/);
});
//# sourceMappingURL=programGate.test.js.map