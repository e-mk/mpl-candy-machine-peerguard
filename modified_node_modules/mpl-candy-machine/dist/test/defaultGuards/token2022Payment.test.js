"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const umi_1 = require("@metaplex-foundation/umi");
const ava_1 = __importDefault(require("ava"));
const src_1 = require("../../src");
const _setup_1 = require("../_setup");
(0, ava_1.default)('it transfers Token2022 tokens from the payer to the destination', async (t) => {
    // Given a Umi instance using the SPL Token 2022 program.
    const umi = await (0, _setup_1.createUmi)();
    const programsWithToken22 = umi.programs.clone();
    programsWithToken22.bind('splToken', 'splToken2022');
    // And a mint account such that:
    // - The destination treasury has 100 tokens.
    // - The payer has 12 tokens.
    const destination = (0, umi_1.generateSigner)(umi).publicKey;
    const [tokenMint, destinationAta, identityAta] = await (0, _setup_1.createMintWithHolders)({ ...umi, programs: programsWithToken22 }, {
        holders: [
            { owner: destination, amount: 100 },
            { owner: umi.identity, amount: 12 },
        ],
    });
    // And a loaded Candy Machine with a token2022Payment guard that requires 5 tokens.
    const collectionMint = (await (0, _setup_1.createCollectionNft)(umi)).publicKey;
    const { publicKey: candyMachine } = await (0, _setup_1.createV2)(umi, {
        collectionMint,
        configLines: [{ name: 'Degen #1', uri: 'https://example.com/degen/1' }],
        guards: {
            token2022Payment: (0, umi_1.some)({
                mint: tokenMint.publicKey,
                destinationAta,
                amount: 5,
            }),
        },
    });
    // When we mint from it.
    const mint = (0, umi_1.generateSigner)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.setComputeUnitLimit)(umi, { units: 600000 }))
        .add((0, src_1.mintV2)(umi, {
        candyMachine,
        nftMint: mint,
        collectionMint,
        collectionUpdateAuthority: umi.identity.publicKey,
        mintArgs: {
            token2022Payment: (0, umi_1.some)({ mint: tokenMint.publicKey, destinationAta }),
        },
    }))
        .sendAndConfirm(umi);
    // Then minting was successful.
    await (0, _setup_1.assertSuccessfulMint)(t, umi, { mint, owner: umi.identity });
    // And the treasury token received 5 tokens.
    const destinationTokenAccount = await (0, mpl_toolbox_1.fetchToken)(umi, destinationAta);
    t.is(destinationTokenAccount.amount, 105n);
    // And the payer lost 5 tokens.
    const payerTokenAccount = await (0, mpl_toolbox_1.fetchToken)(umi, identityAta);
    t.is(payerTokenAccount.amount, 7n);
});
//# sourceMappingURL=token2022Payment.test.js.map