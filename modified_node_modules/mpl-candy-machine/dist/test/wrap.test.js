"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const umi_1 = require("@metaplex-foundation/umi");
const ava_1 = __importDefault(require("ava"));
const src_1 = require("../src");
const _setup_1 = require("./_setup");
(0, ava_1.default)('it can wrap a candy machine v1 in a candy guard', async (t) => {
    // Given an existing candy machine and candy guard.
    const umi = await (0, _setup_1.createUmi)();
    const candyMachine = (await (0, _setup_1.createV1)(umi)).publicKey;
    const candyGuard = await (0, _setup_1.createCandyGuard)(umi);
    // When we wrap the candy machine in the candy guard.
    await (0, umi_1.transactionBuilder)()
        .add((0, src_1.wrap)(umi, { candyMachine, candyGuard }))
        .sendAndConfirm(umi);
    // Then the mint authority of the candy machine is the candy guard.
    const candyMachineAccount = await (0, src_1.fetchCandyMachine)(umi, candyMachine);
    t.like(candyMachineAccount, {
        authority: (0, umi_1.publicKey)(umi.identity),
        mintAuthority: (0, umi_1.publicKey)(candyGuard),
    });
});
(0, ava_1.default)('it can wrap a candy machine v2 in a candy guard', async (t) => {
    // Given an existing candy machine and candy guard.
    const umi = await (0, _setup_1.createUmi)();
    const candyMachine = (await (0, _setup_1.createV2)(umi)).publicKey;
    const candyGuard = await (0, _setup_1.createCandyGuard)(umi);
    // When we wrap the candy machine in the candy guard.
    await (0, umi_1.transactionBuilder)()
        .add((0, src_1.wrap)(umi, { candyMachine, candyGuard }))
        .sendAndConfirm(umi);
    // Then the mint authority of the candy machine is the candy guard.
    const candyMachineAccount = await (0, src_1.fetchCandyMachine)(umi, candyMachine);
    t.like(candyMachineAccount, {
        authority: (0, umi_1.publicKey)(umi.identity),
        mintAuthority: (0, umi_1.publicKey)(candyGuard),
    });
});
(0, ava_1.default)('it can update the candy guard associated with a candy machine', async (t) => {
    // Given an existing candy machine and a candy guard associated with it.
    const umi = await (0, _setup_1.createUmi)();
    const candyMachine = (await (0, _setup_1.createV2)(umi)).publicKey;
    const candyGuardA = await (0, _setup_1.createCandyGuard)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, src_1.wrap)(umi, { candyMachine, candyGuard: candyGuardA }))
        .sendAndConfirm(umi);
    // When we wrap the candy machine in a different candy guard.
    const candyGuardB = await (0, _setup_1.createCandyGuard)(umi);
    await (0, umi_1.transactionBuilder)()
        .add((0, src_1.wrap)(umi, { candyMachine, candyGuard: candyGuardB }))
        .sendAndConfirm(umi);
    // Then the mint authority of the candy machine was updated accordingly.
    const candyMachineAccount = await (0, src_1.fetchCandyMachine)(umi, candyMachine);
    t.like(candyMachineAccount, {
        authority: (0, umi_1.publicKey)(umi.identity),
        mintAuthority: (0, umi_1.publicKey)(candyGuardB),
    });
});
//# sourceMappingURL=wrap.test.js.map